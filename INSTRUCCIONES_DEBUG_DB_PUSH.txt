
═══════════════════════════════════════════════════════════════════
🐛 INSTRUCCIONES: DEBUG DE PRISMA DB PUSH
═══════════════════════════════════════════════════════════════════
Fecha: 28 Octubre 2025
Commit: a014335
Repositorio: https://github.com/qhosting/escalafin

═══════════════════════════════════════════════════════════════════
❌ PROBLEMA ACTUAL
═══════════════════════════════════════════════════════════════════

Los logs de la base de datos muestran:
  ERROR: relation "public.users" does not exist

Esto significa:
  • La aplicación inicia correctamente
  • La conexión a PostgreSQL funciona
  • Las tablas NO se están creando
  • El comando "prisma db push" no se ejecuta o falla

═══════════════════════════════════════════════════════════════════
✅ MEJORAS APLICADAS EN ESTE COMMIT
═══════════════════════════════════════════════════════════════════

1. LOGGING MEJORADO en start-improved.sh:
   ✓ Muestra el comando de Prisma usado
   ✓ Muestra el working directory
   ✓ Verifica existencia de schema.prisma
   ✓ Captura output COMPLETO de db push
   ✓ Muestra código de salida de db push

2. NUEVO SCRIPT DE DEBUG (start-debug.sh):
   ✓ Verificación exhaustiva paso a paso
   ✓ Lista contenido de directorios
   ✓ Verifica versiones de Node/NPM
   ✓ Busca Prisma CLI
   ✓ Verifica DATABASE_URL
   ✓ Verifica schema.prisma
   ✓ Output super verbose

═══════════════════════════════════════════════════════════════════
🚀 OPCIÓN 1: DEPLOY CON LOGGING MEJORADO (RECOMENDADO)
═══════════════════════════════════════════════════════════════════

1. En EasyPanel → Tu Proyecto → Settings
2. Pull del commit: a014335
3. Limpiar caché de build (OBLIGATORIO)
4. Rebuild completo
5. IR A LOGS en tiempo real
6. Buscar esta sección:

   🔄 Sincronizando esquema con base de datos...
   📍 Usando comando: [...]
   📍 Working directory: [...]
   📍 Schema location: [...]
   🚀 Ejecutando: [...] db push --accept-data-loss --skip-generate
   📋 Output completo del comando:
   [AQUÍ VEREMOS EL OUTPUT COMPLETO]
   
   Si es exitoso:
   ✅ Esquema sincronizado exitosamente
   
   Si falla:
   ❌ ERROR: db push falló con código: X

7. COPIAR Y ENVIAR la sección completa de logs

═══════════════════════════════════════════════════════════════════
🚀 OPCIÓN 2: DEPLOY CON SCRIPT DE DEBUG (SI OPCIÓN 1 NO AYUDA)
═══════════════════════════════════════════════════════════════════

Si los logs de la Opción 1 no muestran información útil:

1. Editar Dockerfile temporalmente:
   
   ANTES (línea final):
   CMD ["dumb-init", "sh", "/app/start-improved.sh"]
   
   DESPUÉS:
   CMD ["dumb-init", "sh", "/app/start-debug.sh"]

2. Commit y push el cambio
3. Rebuild en EasyPanel
4. Los logs mostrarán diagnóstico COMPLETO paso a paso:
   - Contenido de directorios
   - Versiones instaladas
   - Ubicación de Prisma CLI
   - Estado de DATABASE_URL
   - Estado de schema.prisma
   - Output completo de db push

5. COPIAR Y ENVIAR todos los logs

═══════════════════════════════════════════════════════════════════
🔍 QUÉ BUSCAR EN LOS LOGS
═══════════════════════════════════════════════════════════════════

ESCENARIO 1: Schema no encontrado
─────────────────────────────────
❌ ERROR: prisma/schema.prisma no encontrado

→ CAUSA: El schema no se copió correctamente en el Dockerfile
→ SOLUCIÓN: Verificar COPY de prisma/ en Dockerfile


ESCENARIO 2: Prisma CLI no disponible
────────────────────────────────────────
❌ Prisma CLI no encontrado

→ CAUSA: Los binarios de Prisma no se copiaron en runtime
→ SOLUCIÓN: Verificar COPY de node_modules en Dockerfile


ESCENARIO 3: Error de conexión DB
──────────────────────────────────
Error: Can't reach database server at...

→ CAUSA: DATABASE_URL incorrecta o DB no accesible
→ SOLUCIÓN: Verificar variable DATABASE_URL en EasyPanel


ESCENARIO 4: Error de permisos DB
──────────────────────────────────
Error: permission denied for schema public

→ CAUSA: Usuario de DB no tiene permisos para crear tablas
→ SOLUCIÓN: Otorgar permisos al usuario o usar superuser


ESCENARIO 5: DB Push se ejecuta pero no crea tablas
────────────────────────────────────────────────────
✅ Esquema sincronizado exitosamente
[pero las tablas no existen]

→ CAUSA: Posible problema con transacciones o schema cache
→ SOLUCIÓN: Verificar que el schema tenga todos los modelos


ESCENARIO 6: Working directory incorrecto
──────────────────────────────────────────
📍 Working directory: /app
❌ ERROR: prisma/schema.prisma no encontrado

→ CAUSA: El script se ejecuta en directorio incorrecto
→ SOLUCIÓN: Verificar WORKDIR en Dockerfile

═══════════════════════════════════════════════════════════════════
📋 INFORMACIÓN NECESARIA PARA AYUDARTE
═══════════════════════════════════════════════════════════════════

Por favor envíame los logs completos, especialmente:

✓ Logs de BUILD (todo el proceso de construcción)
✓ Logs de RUNTIME (desde "🚀 Iniciando ESCALAFIN" hasta el error)
✓ La sección completa de "🔄 Sincronizando esquema"
✓ Cualquier error que aparezca

También sería útil:
✓ Confirmar que DATABASE_URL está configurada en EasyPanel
✓ Confirmar tipo de base de datos (PostgreSQL?)
✓ Confirmar versión de PostgreSQL si es posible

═══════════════════════════════════════════════════════════════════
📚 ARCHIVOS DE REFERENCIA
═══════════════════════════════════════════════════════════════════

✓ start-improved.sh    - Script principal con logging mejorado
✓ start-debug.sh       - Script de debugging exhaustivo
✓ FIX_DB_PUSH_DEBUG.md - Documentación completa del debug

═══════════════════════════════════════════════════════════════════
🎯 PRÓXIMO PASO
═══════════════════════════════════════════════════════════════════

1. Deploy con commit a014335
2. Limpiar caché
3. Rebuild
4. Revisar logs cuidadosamente
5. Enviarme la sección de "Sincronizando esquema" completa

Con esos logs podré identificar exactamente qué está fallando.

═══════════════════════════════════════════════════════════════════
Generado: 28 Octubre 2025
Estado: ⏳ Esperando logs de deployment
═══════════════════════════════════════════════════════════════════
