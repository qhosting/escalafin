═══════════════════════════════════════════════════════════════
  CHECKLIST PRE-DEPLOY - BASADO EN COMMITS GITHUB
  https://github.com/qhosting/escalafin/commits/main
═══════════════════════════════════════════════════════════════

OBJETIVO:
---------
Prevenir errores de deploy verificando los fixes aplicados y
evitando que los mismos problemas se repitan.

═══════════════════════════════════════════════════════════════
  PROBLEMAS RESUELTOS Y CÓMO PREVENIRLOS
═══════════════════════════════════════════════════════════════

1. PROBLEMA: Rutas absolutas hardcodeadas
   ----------------------------------------
   Commit: 310f7b1
   Error: "Module '@prisma/client' has no exported member 'UserRole'"
   
   CAUSA:
   - schema.prisma tenía: output = "/home/ubuntu/escalafin_mvp/..."
   - Esta ruta no existe en Docker
   
   PREVENCIÓN:
   ✓ Nunca usar rutas absolutas del sistema host
   ✓ Usar rutas relativas o dejar valores por defecto
   ✓ Ejecutar: scripts/validate-absolute-paths.sh
   ✓ Buscar: /home/ubuntu, /opt/hostedapp, /root en código
   
   VERIFICAR ANTES DE DEPLOY:
   □ grep -r "/home/ubuntu" app/ prisma/ --exclude-dir=node_modules
   □ grep -r "/opt/hostedapp" app/ prisma/ --exclude-dir=node_modules
   □ cat app/prisma/schema.prisma | grep "output ="
   

2. PROBLEMA: Symlinks en repositorio
   -----------------------------------
   Commit: 5801d78
   Error: Archivos symlink causan problemas en GitHub y Docker
   
   CAUSA:
   - app/yarn.lock era un symlink a /opt/hostedapp/...
   - Git trackea symlinks pero Docker no puede seguirlos
   
   PREVENCIÓN:
   ✓ Eliminar todos los symlinks del código fuente
   ✓ Añadir symlinks a .gitignore
   ✓ Verificar con: find . -type l
   
   VERIFICAR ANTES DE DEPLOY:
   □ find app/ -type l 2>/dev/null | wc -l  # debe ser 0
   □ git ls-files -s | grep "^120000"  # debe estar vacío
   

3. PROBLEMA: yarn.lock en proyecto NPM
   ------------------------------------
   Commit: 5801d78
   Error: Confusión entre gestores de paquetes
   
   CAUSA:
   - Proyecto usa NPM (package-lock.json)
   - Pero existía yarn.lock causando conflictos
   
   PREVENCIÓN:
   ✓ Un solo gestor de paquetes por proyecto
   ✓ Si usas NPM: solo package-lock.json
   ✓ Si usas Yarn: solo yarn.lock
   
   VERIFICAR ANTES DE DEPLOY:
   □ ls -la app/ | grep -E "(yarn.lock|package-lock.json)"
   □ Debe existir SOLO package-lock.json (proyecto usa NPM)
   

4. PROBLEMA: Rutas relativas incorrectas en Dockerfile
   ---------------------------------------------------
   Commit: 277c884
   Error: "cannot create directory './': Is a directory"
   
   CAUSA:
   - touch ./yarn.lock intentaba crear en directorio inexistente
   - Contexto de directorio incorrecto
   
   PREVENCIÓN:
   ✓ Usar rutas absolutas en Dockerfile cuando sea necesario
   ✓ Verificar WORKDIR antes de cada comando
   ✓ No asumir directorio actual
   
   VERIFICAR ANTES DE DEPLOY:
   □ cat Dockerfile | grep "WORKDIR"
   □ Verificar que todos los paths son correctos después de WORKDIR
   

5. PROBLEMA: Scripts de producción no incluidos en Docker
   -------------------------------------------------------
   Commit: Multiple (ver .dockerignore)
   Error: "script no encontrado en contenedor"
   
   CAUSA:
   - .dockerignore bloqueaba scripts necesarios
   - Scripts no se copiaban al contenedor
   
   PREVENCIÓN:
   ✓ Verificar que .dockerignore no bloquee archivos críticos
   ✓ Scripts de inicio deben estar incluidos
   ✓ Verificar con: cat .dockerignore
   
   VERIFICAR ANTES DE DEPLOY:
   □ cat .dockerignore | grep -E "(start|health|setup)"
   □ Asegurar que estos scripts NO estén bloqueados:
     - start-improved.sh
     - emergency-start.sh
     - healthcheck.sh
     - scripts/setup-users-production.js
   

═══════════════════════════════════════════════════════════════
  VALIDACIONES AUTOMÁTICAS IMPLEMENTADAS
═══════════════════════════════════════════════════════════════

Hook Pre-Push (commit 820d199):
-------------------------------
✓ scripts/pre-push-check.sh
  - Valida que no existan symlinks
  - Verifica consistencia de package manager
  - Ejecuta validate-absolute-paths.sh

Script de Validación (commit 820d199):
-------------------------------------
✓ scripts/validate-absolute-paths.sh
  - Detecta rutas absolutas del host
  - Verifica symlinks en código
  - Valida imports problemáticos
  - Revisa configuraciones (tsconfig, next.config, package.json)
  - Analiza Dockerfile y .dockerignore

═══════════════════════════════════════════════════════════════
  COMANDOS DE VERIFICACIÓN RÁPIDA ANTES DE DEPLOY
═══════════════════════════════════════════════════════════════

# 1. Verificar que no hay rutas absolutas problemáticas
bash scripts/validate-absolute-paths.sh

# 2. Verificar que no hay symlinks
find app/ -type l 2>/dev/null

# 3. Verificar gestor de paquetes
ls -la app/package-lock.json app/yarn.lock 2>/dev/null

# 4. Verificar schema.prisma
cat app/prisma/schema.prisma | grep -A 3 "generator client"

# 5. Verificar .dockerignore
cat .dockerignore | grep -v "^#" | grep -v "^$"

# 6. Verificar scripts críticos existen
ls -lh emergency-start.sh start-improved.sh healthcheck.sh \
       app/scripts/setup-users-production.js

# 7. Test build local (simulación)
bash test-build-quick.sh

═══════════════════════════════════════════════════════════════
  COMMITS CLAVE DE REFERENCIA
═══════════════════════════════════════════════════════════════

310f7b1 - Fix: Eliminar output path hardcodeado en Prisma
5801d78 - Fix: Eliminar symlink yarn.lock
277c884 - Fix: Corregir creación de yarn.lock dummy en Dockerfile
820d199 - Feat: Validación automática de rutas absolutas
6a9340e - Chore: Limpieza masiva del proyecto

Ver todos los commits:
https://github.com/qhosting/escalafin/commits/main

Ver un commit específico:
https://github.com/qhosting/escalafin/commit/[HASH]

═══════════════════════════════════════════════════════════════
  ANTES DE CADA DEPLOY EN EASYPANEL
═══════════════════════════════════════════════════════════════

1. □ Pull latest commit desde GitHub
2. □ Ejecutar: bash scripts/validate-absolute-paths.sh
3. □ Verificar que no hay symlinks: find app/ -type l
4. □ Verificar package-lock.json existe y es regular
5. □ Clear build cache en EasyPanel (IMPORTANTE!)
6. □ Rebuild
7. □ Monitorear logs de build completos
8. □ Verificar que no aparezcan errores de rutas
9. □ Confirmar que Prisma Client se genera correctamente
10. □ Verificar que la app inicia sin errores
11. □ Probar health check endpoint
12. □ Confirmar acceso público funciona

═══════════════════════════════════════════════════════════════
  SEÑALES DE ALERTA EN BUILD LOGS
═══════════════════════════════════════════════════════════════

❌ "no such file or directory" → Verificar rutas
❌ "Module has no exported member" → Verificar Prisma generation
❌ "cannot create directory" → Verificar WORKDIR en Dockerfile
❌ "script not found" → Verificar .dockerignore
❌ Symlink warnings → Eliminar symlinks
❌ "lockfile version mismatch" → Verificar package manager

═══════════════════════════════════════════════════════════════

Última actualización: 29 Oct 2025
Basado en: https://github.com/qhosting/escalafin/commits/main
