
# Dockerfile optimizado para producci√≥n con Coolify
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache libc6-compat curl dumb-init openssl

# Create app directory and user
WORKDIR /app
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Install dependencies
FROM base AS deps
WORKDIR /app

# Copy package files
COPY app/package.json app/yarn.lock* ./

# Install dependencies with network timeout
RUN if [ -f yarn.lock ]; then \
      yarn install --frozen-lockfile --network-timeout 300000 --production=false; \
    else \
      npm ci --legacy-peer-deps; \
    fi

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY app/ .

# Generate Prisma client
RUN npx prisma generate

# Build Next.js application
RUN yarn build

# Production image
FROM base AS runner
WORKDIR /app

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# Create necessary directories
RUN mkdir -p /app/uploads && chown nextjs:nodejs /app/uploads

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]
