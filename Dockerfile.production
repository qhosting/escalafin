
# Dockerfile optimizado para Coolify con output standalone
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    curl \
    dumb-init \
    openssl \
    postgresql-client

WORKDIR /app

# Create user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# ===================================
# Dependencies stage
# ===================================
FROM base AS deps
WORKDIR /app

# Copy package files
COPY app/package.json app/yarn.lock* app/package-lock.json* ./

# Install dependencies with proper error handling
RUN if [ -f yarn.lock ]; then \
      yarn install --frozen-lockfile --network-timeout 600000 --production=false; \
    elif [ -f package-lock.json ]; then \
      npm ci --legacy-peer-deps; \
    else \
      npm install --legacy-peer-deps; \
    fi

# ===================================
# Builder stage
# ===================================
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY app/ .

# Generate Prisma client
RUN npx prisma generate

# Build Next.js with standalone output
ENV NEXT_OUTPUT_MODE=standalone
RUN yarn build || npm run build

# ===================================
# Production stage
# ===================================
FROM base AS runner
WORKDIR /app

# Copy built application (standalone mode)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy Prisma files
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

# Copy start script
COPY --chown=nextjs:nodejs start.sh ./start.sh
RUN chmod +x ./start.sh

# Create necessary directories
RUN mkdir -p /app/uploads && chown nextjs:nodejs /app/uploads
RUN mkdir -p /app/.next/cache && chown nextjs:nodejs /app/.next/cache

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application with the start script
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "./start.sh"]
