
# üîç DOCKERFILE CON DEBUGGING EXTENDIDO
# ===================================

FROM node:22-alpine AS base

RUN apk add --no-cache \
    libc6-compat \
    openssl \
    curl \
    dumb-init

# Instalar yarn 4.9.4
RUN corepack enable && corepack prepare yarn@4.9.4 --activate

WORKDIR /app

# ===================================
# STAGE 1: Instalar dependencias
# ===================================
FROM base AS deps

WORKDIR /app

# Copy package files
COPY app/package.json ./
COPY app/yarn.lock ./
COPY app/.yarnrc.yml ./

# Instalar dependencias con yarn
RUN echo "=== üì¶ Instalando dependencias con Yarn ===" && \
    echo "üìä Versi√≥n de yarn: $(yarn --version)" && \
    echo "üìä Versi√≥n de node: $(node --version)" && \
    yarn install --frozen-lockfile --network-timeout 100000 && \
    echo "‚úÖ Yarn install completado"

# ===================================
# STAGE 2: Build con DEBUG
# ===================================
FROM base AS builder

WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY app/ ./

# Configurar env vars
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
ENV NEXT_OUTPUT_MODE=standalone

# Verificar estructura del proyecto
RUN echo "=== üìÇ Verificando estructura del proyecto ===" && \
    echo "üì¶ node_modules existe: $(test -d node_modules && echo 'S√ç' || echo 'NO')" && \
    echo "üìã package.json existe: $(test -f package.json && echo 'S√ç' || echo 'NO')" && \
    echo "‚öôÔ∏è  next.config.js existe: $(test -f next.config.js && echo 'S√ç' || echo 'NO')" && \
    echo "üìÅ app/ existe: $(test -d app && echo 'S√ç' || echo 'NO')" && \
    echo "üóÑÔ∏è  prisma/ existe: $(test -d prisma && echo 'S√ç' || echo 'NO')" && \
    ls -la

# Generar Prisma
RUN echo "=== üîß Generando Prisma Client ===" && \
    npx prisma generate && \
    echo "‚úÖ Prisma Client generado"

# Build Next.js con VERBOSE logging
RUN echo "=== üèóÔ∏è  Building Next.js (MODO VERBOSE) ===" && \
    echo "üîç Variables de entorno:" && \
    env | grep -E "(NODE_ENV|NEXT_|SKIP_)" && \
    echo "" && \
    echo "üîç Ejecutando: yarn build" && \
    yarn build 2>&1 | tee /tmp/build.log || \
    (echo "‚ùå Build fall√≥. √öltimas 50 l√≠neas del log:" && \
     tail -50 /tmp/build.log && \
     echo "" && \
     echo "üîç Verificando archivos TypeScript..." && \
     find . -name "*.ts" -o -name "*.tsx" | head -20 && \
     echo "" && \
     echo "üîç Verificando tsconfig.json..." && \
     cat tsconfig.json && \
     exit 1) && \
    echo "‚úÖ Build completado exitosamente"

# Verificar standalone
RUN if [ ! -d ".next/standalone" ]; then \
        echo "‚ùå ERROR: Standalone NO generado"; \
        ls -la .next/; \
        exit 1; \
    fi && \
    echo "‚úÖ Standalone verificado"

# ===================================
# STAGE 3: Runner de producci√≥n
# ===================================
FROM base AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Crear usuario no-root
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy scripts
COPY start.sh healthcheck.sh /app/
RUN chmod +x /app/start.sh /app/healthcheck.sh

# Copy standalone build
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Copy Prisma
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Crear directorios
RUN mkdir -p /app/uploads && \
    chown -R nextjs:nodejs /app

# Verificar server.js
RUN if [ ! -f "/app/server.js" ]; then \
        echo "‚ùå ERROR: server.js no encontrado"; \
        exit 1; \
    fi

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh || exit 1

USER nextjs

EXPOSE 3000

CMD ["dumb-init", "sh", "/app/start.sh"]
