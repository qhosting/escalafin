
# Docker Compose para producci√≥n con Coolify
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.coolify
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - OPENPAY_MERCHANT_ID=${OPENPAY_MERCHANT_ID}
      - OPENPAY_PRIVATE_KEY=${OPENPAY_PRIVATE_KEY}
      - OPENPAY_PUBLIC_KEY=${OPENPAY_PUBLIC_KEY}
      - OPENPAY_BASE_URL=${OPENPAY_BASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION}
      - AWS_FOLDER_PREFIX=${AWS_FOLDER_PREFIX}
      - EVOLUTION_API_URL=${EVOLUTION_API_URL}
      - EVOLUTION_API_TOKEN=${EVOLUTION_API_TOKEN}
      - EVOLUTION_INSTANCE_NAME=${EVOLUTION_INSTANCE_NAME}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "coolify.managed=true"
      - "coolify.name=escalafin-app"

  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-escalafin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-escalafin}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-escalafin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "coolify.managed=true"
      - "coolify.name=escalafin-db"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "coolify.managed=true"
      - "coolify.name=escalafin-redis"

volumes:
  postgres_data:
    labels:
      - "coolify.managed=true"
  redis_data:
    labels:
      - "coolify.managed=true"

networks:
  default:
    labels:
      - "coolify.managed=true"
