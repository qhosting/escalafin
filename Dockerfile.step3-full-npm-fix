
# üöÄ DOCKERFILE STEP 3: BUILD COMPLETO - NPM FIX ALTERNATIVO
# Fix: Eliminar package-lock.json y regenerar
# ===================================

FROM node:18-alpine AS base

RUN apk add --no-cache \
    libc6-compat \
    openssl \
    curl \
    dumb-init

WORKDIR /app

# ===================================
# STAGE 1: Instalar dependencias
# ===================================
FROM base AS deps

# Actualizar npm a versi√≥n estable
RUN npm install -g npm@latest

WORKDIR /app

# Copy SOLO package.json (regenerar lockfile)
COPY app/package.json ./

# Instalar dependencias SIN lockfile (npm lo regenerar√°)
RUN echo "=== üì¶ Instalando dependencias (regenerando lockfile) ===" && \
    echo "üìä Versi√≥n de npm: $(npm --version)" && \
    echo "üìä Versi√≥n de node: $(node --version)" && \
    rm -f package-lock.json && \
    npm install --legacy-peer-deps && \
    echo "‚úÖ Dependencias instaladas correctamente"

# ===================================
# STAGE 2: Build completo
# ===================================
FROM base AS builder

WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY app/ ./

# Configurar env vars
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1
ENV NEXT_OUTPUT_MODE=standalone

# Generar Prisma
RUN echo "=== üîß Generando Prisma Client ===" && \
    npx prisma generate && \
    echo "‚úÖ Prisma Client generado"

# Build Next.js
RUN echo "=== üèóÔ∏è  Building Next.js ===" && \
    npm run build && \
    echo "‚úÖ Build completado"

# Verificar standalone
RUN if [ ! -d ".next/standalone" ]; then \
        echo "‚ùå ERROR: Standalone NO generado"; \
        exit 1; \
    fi && \
    echo "‚úÖ Standalone verificado"

# ===================================
# STAGE 3: Runner de producci√≥n
# ===================================
FROM base AS runner

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Crear usuario no-root
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy scripts
COPY start.sh healthcheck.sh /app/
RUN chmod +x /app/start.sh /app/healthcheck.sh

# Copy standalone build
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Copy Prisma
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Crear directorios
RUN mkdir -p /app/uploads && \
    chown -R nextjs:nodejs /app

# Verificar server.js
RUN if [ ! -f "/app/server.js" ]; then \
        echo "‚ùå ERROR: server.js no encontrado"; \
        exit 1; \
    fi

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh || exit 1

USER nextjs

EXPOSE 3000

CMD ["dumb-init", "sh", "/app/start.sh"]
