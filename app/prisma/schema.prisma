generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                         String                 @id @default(cuid())
  email                      String                 @unique
  password                   String?
  firstName                  String
  lastName                   String
  phone                      String?
  role                       UserRole               @default(CLIENTE)
  status                     UserStatus             @default(ACTIVE)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  emailVerified              DateTime?
  accounts                   Account[]
  sessions                   Session[]
  auditLogs                  AuditLog[]             @relation("AuditLogs")
  cashCollections            CashCollection[]       @relation("CashCollector")
  clientsAssigned            Client[]               @relation("AsesorClients")
  clientProfile              Client?                @relation("UserClient")
  creditApplicationsCreated  CreditApplication[]    @relation("CreatedByAsesor")
  creditApplicationsReviewed CreditApplication[]    @relation("ReviewedByAdmin")
  files                      FileUpload[]           @relation("UserFiles")
  verifiedFiles              FileUpload[]           @relation("VerifiedFiles")
  filesUploaded              File[]                 @relation("UserDualFiles")
  moduleChangeLogs           ModuleChangeLog[]      @relation("ModuleChangeLogs")
  rolePermissionUpdates      ModuleRolePermission[] @relation("RolePermissionUpdates")
  notifications              Notification[]         @relation("UserNotifications")
  paymentsProcessed          Payment[]              @relation("ProcessedBy")
  moduleUpdates              PWAModule[]            @relation("ModuleUpdates")
  generatedReports           ReportGeneration[]     @relation("GeneratedReports")
  configUpdates              SystemConfig[]         @relation("ConfigUpdates")

  @@map("users")
}

model Client {
  id                           String              @id @default(cuid())
  userId                       String?             @unique
  firstName                    String
  lastName                     String
  email                        String?             @unique
  phone                        String
  dateOfBirth                  DateTime?
  address                      String?
  city                         String?
  state                        String?
  postalCode                   String?
  monthlyIncome                Decimal?            @db.Decimal(12, 2)
  employmentType               EmploymentType?
  employerName                 String?
  workAddress                  String?
  yearsEmployed                Int?
  creditScore                  Int?
  bankName                     String?
  accountNumber                String?
  status                       ClientStatus        @default(ACTIVE)
  asesorId                     String?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  migratedFrom                 String?
  migrationDate                DateTime?
  initialBalance               Decimal?            @db.Decimal(12, 2)
  lastPaymentDate              DateTime?
  notes                        String?
  whatsappNotificationsEnabled Boolean             @default(true)
  whatsappPaymentReceived      Boolean             @default(true)
  whatsappPaymentReminder      Boolean             @default(true)
  whatsappLoanUpdates          Boolean             @default(true)
  whatsappMarketingMessages    Boolean             @default(false)
  asesor                       User?               @relation("AsesorClients", fields: [asesorId], references: [id])
  user                         User?               @relation("UserClient", fields: [userId], references: [id])
  creditApplications           CreditApplication[]
  creditScores                 CreditScore[]       @relation("ClientScoring")
  files                        FileUpload[]        @relation("ClientFiles")
  dualFiles                    File[]              @relation("ClientDualFiles")
  loans                        Loan[]
  personalReferences           PersonalReference[] @relation("ClientReferences")
  whatsappMessages             WhatsAppMessage[]   @relation("ClientMessages")

  @@map("clients")
}

model PersonalReference {
  id                     String                 @id @default(cuid())
  clientId               String
  fullName               String
  relationship           RelationshipType
  relationshipOther      String?
  phone                  String
  address                String?
  notificationPreference NotificationPreference @default(WHATSAPP)
  isActive               Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  client                 Client                 @relation("ClientReferences", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@map("personal_references")
}

model CreditApplication {
  id              String            @id @default(cuid())
  clientId        String
  asesorId        String
  loanType        LoanType
  requestedAmount Decimal           @db.Decimal(12, 2)
  requestedTerm   Int
  purpose         String
  status          ApplicationStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  reviewComments  String?
  approvedAmount  Decimal?          @db.Decimal(12, 2)
  approvedTerm    Int?
  interestRate    Decimal?          @db.Decimal(5, 4)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation("CreatedByAsesor", fields: [asesorId], references: [id])
  client          Client            @relation(fields: [clientId], references: [id])
  reviewedByUser  User?             @relation("ReviewedByAdmin", fields: [reviewedBy], references: [id])
  creditScores    CreditScore[]     @relation("ApplicationScoring")
  loan            Loan?

  @@map("credit_applications")
}

model Loan {
  id                   String                 @id @default(cuid())
  clientId             String
  creditApplicationId  String?                @unique
  loanNumber           String                 @unique
  loanType             LoanType
  principalAmount      Decimal                @db.Decimal(12, 2)
  interestRate         Decimal                @db.Decimal(5, 4)
  termMonths           Int
  monthlyPayment       Decimal                @db.Decimal(12, 2)
  totalAmount          Decimal                @db.Decimal(12, 2)
  balanceRemaining     Decimal                @db.Decimal(12, 2)
  status               LoanStatus             @default(ACTIVE)
  startDate            DateTime
  endDate              DateTime
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  amortizationSchedule AmortizationSchedule[]
  creditScores         CreditScore[]          @relation("LoanScoring")
  files                FileUpload[]           @relation("LoanFiles")
  client               Client                 @relation(fields: [clientId], references: [id])
  creditApplication    CreditApplication?     @relation(fields: [creditApplicationId], references: [id])
  payments             Payment[]

  @@map("loans")
}

model AmortizationSchedule {
  id               String   @id @default(cuid())
  loanId           String
  paymentNumber    Int
  paymentDate      DateTime
  principalPayment Decimal  @db.Decimal(12, 2)
  interestPayment  Decimal  @db.Decimal(12, 2)
  totalPayment     Decimal  @db.Decimal(12, 2)
  remainingBalance Decimal  @db.Decimal(12, 2)
  isPaid           Boolean  @default(false)
  loan             Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  payment          Payment?

  @@unique([loanId, paymentNumber])
  @@map("amortization_schedule")
}

model Payment {
  id                     String                @id @default(cuid())
  loanId                 String
  amortizationScheduleId String?               @unique
  amount                 Decimal               @db.Decimal(12, 2)
  paymentDate            DateTime
  paymentMethod          PaymentMethod
  status                 PaymentStatus         @default(COMPLETED)
  reference              String?
  notes                  String?
  processedBy            String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  cashCollection         CashCollection?       @relation("CashCollections")
  transactions           PaymentTransaction[]  @relation("PaymentTransactions")
  amortizationSchedule   AmortizationSchedule? @relation(fields: [amortizationScheduleId], references: [id])
  loan                   Loan                  @relation(fields: [loanId], references: [id])
  processedByUser        User?                 @relation("ProcessedBy", fields: [processedBy], references: [id])

  @@map("payments")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  userEmail  String?
  action     String
  resource   String?
  resourceId String?
  details    String?
  ipAddress  String?
  userAgent  String?
  metadata   String?
  timestamp  DateTime @default(now())
  user       User?    @relation("AuditLogs", fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model CreditScore {
  id              String                @id @default(cuid())
  loanId          String?
  clientId        String?
  applicationId   String?
  score           Int
  risk            RiskLevel
  recommendation  ScoringRecommendation
  maxAmount       Decimal?              @db.Decimal(12, 2)
  recommendedRate Decimal?              @db.Decimal(5, 4)
  factors         String
  calculatedAt    DateTime              @default(now())
  validUntil      DateTime?
  createdAt       DateTime              @default(now())
  application     CreditApplication?    @relation("ApplicationScoring", fields: [applicationId], references: [id])
  client          Client?               @relation("ClientScoring", fields: [clientId], references: [id])
  loan            Loan?                 @relation("LoanScoring", fields: [loanId], references: [id])

  @@map("credit_scores")
}

model Notification {
  id           String              @id @default(cuid())
  userId       String
  type         NotificationType
  channel      NotificationChannel
  status       NotificationStatus  @default(PENDING)
  title        String
  message      String
  data         String?
  scheduledFor DateTime?
  sentAt       DateTime?
  readAt       DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([scheduledFor])
  @@map("notifications")
}

model FileUpload {
  id               String       @id @default(cuid())
  userId           String
  clientId         String?
  loanId           String?
  filename         String
  originalName     String
  mimeType         String
  size             Int
  category         FileCategory
  status           FileStatus   @default(UPLOADED)
  cloudStoragePath String
  description      String?
  uploadedAt       DateTime     @default(now())
  verifiedAt       DateTime?
  verifiedBy       String?
  expiresAt        DateTime?
  client           Client?      @relation("ClientFiles", fields: [clientId], references: [id])
  loan             Loan?        @relation("LoanFiles", fields: [loanId], references: [id])
  user             User         @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)
  verifierUser     User?        @relation("VerifiedFiles", fields: [verifiedBy], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([loanId])
  @@map("file_uploads")
}

model PaymentTransaction {
  id                    String                   @id @default(cuid())
  paymentId             String
  provider              PaymentProviderType
  providerTransactionId String?
  amount                Decimal                  @db.Decimal(12, 2)
  currency              String                   @default("MXN")
  status                PaymentTransactionStatus @default(PENDING)
  providerResponse      String?
  errorMessage          String?
  processedAt           DateTime?
  webhookData           String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  payment               Payment                  @relation("PaymentTransactions", fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([provider, providerTransactionId])
  @@index([status])
  @@map("payment_transactions")
}

model CashCollection {
  id                String   @id @default(cuid())
  paymentId         String   @unique
  collectorId       String
  collectionMethod  String
  collectorLocation String
  photoEvidence     String?
  deviceInfo        String?
  collectionNotes   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  collector         User     @relation("CashCollector", fields: [collectorId], references: [id])
  payment           Payment  @relation("CashCollections", fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([collectorId])
  @@index([collectionMethod])
  @@map("cash_collections")
}

model SystemConfig {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  category      String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  updatedBy     String?
  updatedByUser User?    @relation("ConfigUpdates", fields: [updatedBy], references: [id])

  @@index([category])
  @@index([key])
  @@map("system_config")
}

model ReportGeneration {
  id          String       @id @default(cuid())
  userId      String
  type        ReportType
  status      ReportStatus @default(PENDING)
  title       String
  description String?
  parameters  String?
  filePath    String?
  fileSize    Int?
  generatedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  user        User         @relation("GeneratedReports", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@map("report_generations")
}

model WhatsAppMessage {
  id                 String                @id @default(cuid())
  clientId           String
  phone              String
  messageType        WhatsAppMessageType
  status             WhatsAppMessageStatus @default(PENDING)
  message            String
  mediaUrl           String?
  scheduledFor       DateTime?
  sentAt             DateTime?
  deliveredAt        DateTime?
  readAt             DateTime?
  errorMessage       String?
  evolutionMessageId String?
  evolutionResponse  String?
  paymentId          String?
  loanId             String?
  metadata           String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  client             Client                @relation("ClientMessages", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
  @@index([scheduledFor])
  @@index([paymentId])
  @@map("whatsapp_messages")
}

model EvolutionAPIConfig {
  id                      String   @id @default(cuid())
  instanceName            String   @unique
  apiKey                  String
  baseUrl                 String
  webhookUrl              String?
  isActive                Boolean  @default(true)
  paymentReceivedTemplate String?
  paymentReminderTemplate String?
  loanApprovedTemplate    String?
  loanUpdateTemplate      String?
  marketingTemplate       String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("evolution_api_config")
}

model File {
  id           String   @id @default(cuid())
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  category     String   @default("general")
  description  String?
  clientId     String?
  uploadedById String
  storageType  String   @default("local")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  client       Client?  @relation("ClientDualFiles", fields: [clientId], references: [id])
  uploadedBy   User     @relation("UserDualFiles", fields: [uploadedById], references: [id])

  @@index([clientId])
  @@index([uploadedById])
  @@index([category])
  @@index([createdAt])
  @@map("files")
}

model PWAModule {
  id               String                 @id @default(cuid())
  moduleKey        String                 @unique
  name             String
  description      String?
  category         ModuleCategory
  status           ModuleStatus           @default(ENABLED)
  isCore           Boolean                @default(false)
  requiredFor      String[]
  availableFor     String[]
  icon             String?
  route            String?
  sortOrder        Int                    @default(0)
  config           String?
  version          String                 @default("1.0.0")
  minSystemVersion String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  updatedBy        String?
  rolePermissions  ModuleRolePermission[] @relation("ModulePermissions")
  updatedByUser    User?                  @relation("ModuleUpdates", fields: [updatedBy], references: [id])

  @@index([category])
  @@index([status])
  @@index([sortOrder])
  @@map("pwa_modules")
}

model ModuleRolePermission {
  id            String    @id @default(cuid())
  moduleId      String
  role          UserRole
  enabled       Boolean   @default(true)
  permissions   String?
  config        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  updatedBy     String?
  module        PWAModule @relation("ModulePermissions", fields: [moduleId], references: [id], onDelete: Cascade)
  updatedByUser User?     @relation("RolePermissionUpdates", fields: [updatedBy], references: [id])

  @@unique([moduleId, role])
  @@index([role])
  @@map("module_role_permissions")
}

model ModuleChangeLog {
  id        String    @id @default(cuid())
  moduleId  String
  action    String
  role      UserRole?
  oldValue  String?
  newValue  String?
  reason    String?
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation("ModuleChangeLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([action])
  @@index([createdAt])
  @@map("module_change_logs")
}

enum UserRole {
  ADMIN
  ASESOR
  CLIENTE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}

enum EmploymentType {
  EMPLOYED
  SELF_EMPLOYED
  UNEMPLOYED
  RETIRED
  STUDENT
}

enum RelationshipType {
  FAMILY
  FRIEND
  COWORKER
  NEIGHBOR
  OTHER
}

enum NotificationPreference {
  SMS
  WHATSAPP
  BOTH
  NONE
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

enum LoanType {
  PERSONAL
  BUSINESS
  MORTGAGE
  AUTO
  EDUCATION
}

enum LoanStatus {
  ACTIVE
  PAID_OFF
  DEFAULTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  DEBIT_CARD
  CREDIT_CARD
  ONLINE
  MIGRATION
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum ScoringRecommendation {
  APPROVE
  REVIEW
  REJECT
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  LOAN_APPROVED
  LOAN_REJECTED
  SYSTEM_ALERT
  MARKETING
  REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  FAILED
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

enum FileCategory {
  IDENTITY_DOCUMENT
  INCOME_PROOF
  BANK_STATEMENT
  CONTRACT
  SIGNATURE
  PHOTO
  OTHER
}

enum FileStatus {
  UPLOADED
  VERIFIED
  REJECTED
  EXPIRED
}

enum PaymentProviderType {
  OPENPAY
  STRIPE
  PAYPAL
  BANK_TRANSFER
  MANUAL
}

enum PaymentTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ReportType {
  LOAN_PORTFOLIO
  PAYMENT_ANALYSIS
  CLIENT_DEMOGRAPHICS
  FINANCIAL_SUMMARY
  RISK_ASSESSMENT
  AUDIT_TRAIL
  CUSTOM
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

enum WhatsAppMessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum WhatsAppMessageType {
  PAYMENT_RECEIVED
  PAYMENT_REMINDER
  LOAN_APPROVED
  LOAN_UPDATE
  MARKETING
  CUSTOM
}

enum ModuleCategory {
  DASHBOARD
  LOANS
  PAYMENTS
  CLIENTS
  REPORTS
  NOTIFICATIONS
  INTEGRATIONS
  TOOLS
  ANALYTICS
}

enum ModuleStatus {
  ENABLED
  DISABLED
  BETA
  MAINTENANCE
}
