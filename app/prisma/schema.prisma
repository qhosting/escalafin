generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/escalafin_mvp/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
enum UserRole {
  ADMIN
  ASESOR
  CLIENTE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  firstName     String
  lastName      String
  phone         String?
  role          UserRole  @default(CLIENTE)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // EscalaFin relations
  clientsAssigned   Client[] @relation("AsesorClients")
  creditApplicationsCreated CreditApplication[] @relation("CreatedByAsesor")
  creditApplicationsReviewed CreditApplication[] @relation("ReviewedByAdmin")
  paymentsProcessed Payment[] @relation("ProcessedBy")
  
  // If user is a client
  clientProfile Client? @relation("UserClient")
  
  // Fase 3 relations
  auditLogs       AuditLog[] @relation("AuditLogs")
  notifications   Notification[] @relation("UserNotifications")
  files           FileUpload[] @relation("UserFiles")
  verifiedFiles   FileUpload[] @relation("VerifiedFiles")
  generatedReports ReportGeneration[] @relation("GeneratedReports")
  configUpdates   SystemConfig[] @relation("ConfigUpdates")
  cashCollections CashCollection[] @relation("CashCollector")

  @@map("users")
}

// Client Management (CRM)
enum ClientStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}

enum EmploymentType {
  EMPLOYED
  SELF_EMPLOYED
  UNEMPLOYED
  RETIRED
  STUDENT
}

model Client {
  id                String          @id @default(cuid())
  userId            String?         @unique
  firstName         String
  lastName          String
  email             String?         @unique
  phone             String
  dateOfBirth       DateTime?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  
  // Financial Information
  monthlyIncome     Decimal?        @db.Decimal(12, 2)
  employmentType    EmploymentType?
  employerName      String?
  workAddress       String?
  yearsEmployed     Int?
  
  // Credit Information
  creditScore       Int?
  bankName          String?
  accountNumber     String?
  
  // Status and Assignment
  status            ClientStatus    @default(ACTIVE)
  asesorId          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Migration fields for existing clients
  migratedFrom      String?         // Source system name
  migrationDate     DateTime?       // When the client was migrated
  initialBalance    Decimal?        @db.Decimal(12, 2) // Initial balance from previous system
  lastPaymentDate   DateTime?       // Last payment date from previous system
  notes             String?         // Additional migration notes

  // WhatsApp Notification Settings
  whatsappNotificationsEnabled Boolean @default(true)
  whatsappPaymentReceived      Boolean @default(true)
  whatsappPaymentReminder      Boolean @default(true)
  whatsappLoanUpdates          Boolean @default(true)
  whatsappMarketingMessages    Boolean @default(false)

  // Relations
  user              User?           @relation("UserClient", fields: [userId], references: [id])
  asesor            User?           @relation("AsesorClients", fields: [asesorId], references: [id])
  creditApplications CreditApplication[]
  loans             Loan[]
  
  // Fase 3 relations
  creditScores      CreditScore[]   @relation("ClientScoring")
  files             FileUpload[]    @relation("ClientFiles")
  whatsappMessages  WhatsAppMessage[] @relation("ClientMessages")
  personalReferences PersonalReference[] @relation("ClientReferences")

  @@map("clients")
}

// Personal References for Clients
enum RelationshipType {
  FAMILY
  FRIEND
  COWORKER
  NEIGHBOR
  OTHER
}

enum NotificationPreference {
  SMS
  WHATSAPP
  BOTH
  NONE
}

model PersonalReference {
  id                      String                  @id @default(cuid())
  clientId                String
  fullName                String
  relationship            RelationshipType
  relationshipOther       String?                 // Para cuando se selecciona OTHER
  phone                   String
  address                 String?
  notificationPreference  NotificationPreference  @default(WHATSAPP)
  isActive                Boolean                 @default(true)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  // Relations
  client                  Client                  @relation("ClientReferences", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@map("personal_references")
}

// Credit Application Workflow
enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

enum LoanType {
  PERSONAL
  BUSINESS
  MORTGAGE
  AUTO
  EDUCATION
}

model CreditApplication {
  id                String            @id @default(cuid())
  clientId          String
  asesorId          String
  loanType          LoanType
  requestedAmount   Decimal           @db.Decimal(12, 2)
  requestedTerm     Int               // months
  purpose           String
  status            ApplicationStatus @default(PENDING)
  
  // Review Information
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewComments    String?
  approvedAmount    Decimal?          @db.Decimal(12, 2)
  approvedTerm      Int?              // months
  interestRate      Decimal?          @db.Decimal(5, 4)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  client            Client            @relation(fields: [clientId], references: [id])
  createdBy         User              @relation("CreatedByAsesor", fields: [asesorId], references: [id])
  reviewedByUser    User?             @relation("ReviewedByAdmin", fields: [reviewedBy], references: [id])
  loan              Loan?
  
  // Fase 3 relations
  creditScores      CreditScore[]     @relation("ApplicationScoring")

  @@map("credit_applications")
}

// Loan Management
enum LoanStatus {
  ACTIVE
  PAID_OFF
  DEFAULTED
  CANCELLED
}

model Loan {
  id                      String                @id @default(cuid())
  clientId                String
  creditApplicationId     String?               @unique
  loanNumber              String                @unique
  loanType                LoanType
  principalAmount         Decimal               @db.Decimal(12, 2)
  interestRate            Decimal               @db.Decimal(5, 4)
  termMonths              Int
  monthlyPayment          Decimal               @db.Decimal(12, 2)
  totalAmount             Decimal               @db.Decimal(12, 2)
  balanceRemaining        Decimal               @db.Decimal(12, 2)
  status                  LoanStatus            @default(ACTIVE)
  startDate               DateTime
  endDate                 DateTime
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  // Relations
  client                  Client                @relation(fields: [clientId], references: [id])
  creditApplication       CreditApplication?    @relation(fields: [creditApplicationId], references: [id])
  amortizationSchedule    AmortizationSchedule[]
  payments                Payment[]
  
  // Fase 3 relations
  creditScores            CreditScore[]         @relation("LoanScoring")
  files                   FileUpload[]          @relation("LoanFiles")

  @@map("loans")
}

// Amortization Schedule
model AmortizationSchedule {
  id                String      @id @default(cuid())
  loanId            String
  paymentNumber     Int
  paymentDate       DateTime
  principalPayment  Decimal     @db.Decimal(12, 2)
  interestPayment   Decimal     @db.Decimal(12, 2)
  totalPayment      Decimal     @db.Decimal(12, 2)
  remainingBalance  Decimal     @db.Decimal(12, 2)
  isPaid            Boolean     @default(false)

  // Relations
  loan              Loan        @relation(fields: [loanId], references: [id], onDelete: Cascade)
  payment           Payment?

  @@unique([loanId, paymentNumber])
  @@map("amortization_schedule")
}

// Payment Management
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  DEBIT_CARD
  CREDIT_CARD
  ONLINE
  MIGRATION
}

model Payment {
  id                      String                @id @default(cuid())
  loanId                  String
  amortizationScheduleId  String?               @unique
  amount                  Decimal               @db.Decimal(12, 2)
  paymentDate             DateTime
  paymentMethod           PaymentMethod
  status                  PaymentStatus         @default(COMPLETED)
  reference               String?
  notes                   String?
  processedBy             String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  // Relations
  loan                    Loan                  @relation(fields: [loanId], references: [id])
  amortizationSchedule    AmortizationSchedule? @relation(fields: [amortizationScheduleId], references: [id])
  processedByUser         User?                 @relation("ProcessedBy", fields: [processedBy], references: [id])
  
  // Fase 3 relations
  transactions            PaymentTransaction[]  @relation("PaymentTransactions")
  cashCollection          CashCollection?       @relation("CashCollections")

  @@map("payments")
}

// Sistema de Auditoría - Fase 3
model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  userEmail   String?
  action      String
  resource    String?
  resourceId  String?
  details     String?     @db.Text // JSON string
  ipAddress   String?
  userAgent   String?     @db.Text
  metadata    String?     @db.Text // JSON string
  timestamp   DateTime    @default(now())

  // Relations
  user        User?       @relation("AuditLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

// Sistema de Scoring Crediticio - Fase 3
enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum ScoringRecommendation {
  APPROVE
  REVIEW  
  REJECT
}

model CreditScore {
  id                String                  @id @default(cuid())
  loanId            String?
  clientId          String?
  applicationId     String?
  score             Int
  risk              RiskLevel
  recommendation    ScoringRecommendation
  maxAmount         Decimal?                @db.Decimal(12, 2)
  recommendedRate   Decimal?                @db.Decimal(5, 4)
  factors           String                  @db.Text // JSON string
  calculatedAt      DateTime                @default(now())
  validUntil        DateTime?
  createdAt         DateTime                @default(now())

  // Relations (optional, can link to different entities)
  loan              Loan?                   @relation("LoanScoring", fields: [loanId], references: [id], onDelete: SetNull)
  client            Client?                 @relation("ClientScoring", fields: [clientId], references: [id], onDelete: SetNull)
  application       CreditApplication?      @relation("ApplicationScoring", fields: [applicationId], references: [id], onDelete: SetNull)

  @@map("credit_scores")
}

// Sistema de Notificaciones Mejorado - Fase 3
enum NotificationType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  LOAN_APPROVED
  LOAN_REJECTED
  SYSTEM_ALERT
  MARKETING
  REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  FAILED
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

model Notification {
  id            String                @id @default(cuid())
  userId        String
  type          NotificationType
  channel       NotificationChannel
  status        NotificationStatus    @default(PENDING)
  title         String
  message       String                @db.Text
  data          String?               @db.Text // JSON string for additional data
  scheduledFor  DateTime?
  sentAt        DateTime?
  readAt        DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  // Relations
  user          User                  @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([scheduledFor])
  @@map("notifications")
}

// Gestión de Archivos - Fase 3
enum FileCategory {
  IDENTITY_DOCUMENT
  INCOME_PROOF
  BANK_STATEMENT
  CONTRACT
  SIGNATURE
  PHOTO
  OTHER
}

enum FileStatus {
  UPLOADED
  VERIFIED
  REJECTED
  EXPIRED
}

model FileUpload {
  id              String        @id @default(cuid())
  userId          String
  clientId        String?
  loanId          String?
  filename        String
  originalName    String
  mimeType        String
  size            Int
  category        FileCategory
  status          FileStatus    @default(UPLOADED)
  cloudStoragePath String       // S3 key or cloud storage path
  description     String?
  uploadedAt      DateTime      @default(now())
  verifiedAt      DateTime?
  verifiedBy      String?
  expiresAt       DateTime?

  // Relations
  user            User          @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)
  client          Client?       @relation("ClientFiles", fields: [clientId], references: [id], onDelete: SetNull)
  loan            Loan?         @relation("LoanFiles", fields: [loanId], references: [id], onDelete: SetNull)
  verifierUser    User?         @relation("VerifiedFiles", fields: [verifiedBy], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([clientId])
  @@index([loanId])
  @@map("file_uploads")
}

// Integración de Pagos - Fase 3
enum PaymentProviderType {
  OPENPAY
  STRIPE
  PAYPAL
  BANK_TRANSFER
  MANUAL
}

enum PaymentTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model PaymentTransaction {
  id                  String                    @id @default(cuid())
  paymentId           String
  provider            PaymentProviderType
  providerTransactionId String?
  amount              Decimal                   @db.Decimal(12, 2)
  currency            String                    @default("MXN")
  status              PaymentTransactionStatus  @default(PENDING)
  providerResponse    String?                   @db.Text // JSON string
  errorMessage        String?
  processedAt         DateTime?
  webhookData         String?                   @db.Text // JSON string
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt

  // Relations
  payment             Payment                   @relation("PaymentTransactions", fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([provider, providerTransactionId])
  @@index([status])
  @@map("payment_transactions")
}

// Cash Collections for Mobile Collection Module
model CashCollection {
  id                  String      @id @default(cuid())
  paymentId           String      @unique
  collectorId         String
  collectionMethod    String      // 'home', 'office', 'field'
  collectorLocation   String      // GPS coordinates or address
  photoEvidence       String?     // Path to photo file
  deviceInfo          String?     // Mobile device information
  collectionNotes     String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relations
  payment             Payment     @relation("CashCollections", fields: [paymentId], references: [id], onDelete: Cascade)
  collector           User        @relation("CashCollector", fields: [collectorId], references: [id])

  @@index([collectorId])
  @@index([collectionMethod])
  @@map("cash_collections")
}

// Configuración del Sistema - Fase 3
model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String    @db.Text
  description String?
  category    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  updatedBy   String?

  // Relations
  updatedByUser User?   @relation("ConfigUpdates", fields: [updatedBy], references: [id], onDelete: SetNull)

  @@index([category])
  @@index([key])
  @@map("system_config")
}

// Reportes y Analytics - Fase 3  
enum ReportType {
  LOAN_PORTFOLIO
  PAYMENT_ANALYSIS
  CLIENT_DEMOGRAPHICS
  FINANCIAL_SUMMARY
  RISK_ASSESSMENT
  AUDIT_TRAIL
  CUSTOM
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

model ReportGeneration {
  id            String        @id @default(cuid())
  userId        String
  type          ReportType
  status        ReportStatus  @default(PENDING)
  title         String
  description   String?
  parameters    String?       @db.Text // JSON string
  filePath      String?       // Path to generated file
  fileSize      Int?
  generatedAt   DateTime?
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  
  // Relations
  user          User          @relation("GeneratedReports", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@map("report_generations")
}

// WhatsApp Messaging System - EvolutionAPI Integration
enum WhatsAppMessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum WhatsAppMessageType {
  PAYMENT_RECEIVED
  PAYMENT_REMINDER
  LOAN_APPROVED
  LOAN_UPDATE
  MARKETING
  CUSTOM
}

model WhatsAppMessage {
  id              String                @id @default(cuid())
  clientId        String
  phone           String
  messageType     WhatsAppMessageType
  status          WhatsAppMessageStatus @default(PENDING)
  message         String                @db.Text
  mediaUrl        String?               // Para enviar imágenes/documentos
  scheduledFor    DateTime?
  sentAt          DateTime?
  deliveredAt     DateTime?
  readAt          DateTime?
  errorMessage    String?
  
  // EvolutionAPI response data
  evolutionMessageId String?
  evolutionResponse  String?            @db.Text // JSON response from EvolutionAPI
  
  // Metadata
  paymentId       String?               // Link to payment that triggered message
  loanId          String?               // Link to loan for loan-related messages
  metadata        String?               @db.Text // Additional JSON data
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  client          Client                @relation("ClientMessages", fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
  @@index([scheduledFor])
  @@index([paymentId])
  @@map("whatsapp_messages")
}

// EvolutionAPI Configuration
model EvolutionAPIConfig {
  id                String    @id @default(cuid())
  instanceName      String    @unique
  apiKey            String
  baseUrl           String
  webhookUrl        String?
  isActive          Boolean   @default(true)
  
  // Message templates
  paymentReceivedTemplate   String? @db.Text
  paymentReminderTemplate   String? @db.Text
  loanApprovedTemplate      String? @db.Text
  loanUpdateTemplate        String? @db.Text
  marketingTemplate         String? @db.Text
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("evolution_api_config")
}

// Actualizar relaciones existentes
// Agregar nuevas relaciones a los modelos existentes
