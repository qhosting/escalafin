# ðŸš€ Docker Compose para EscalaFin
# Optimizado con mejores prÃ¡cticas de CitaPlanner
version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_OUTPUT_MODE=standalone
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://escalafin:password@postgres:5432/escalafin}
      
      # NextAuth
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-development-secret-key-32-chars}
      
      # App Config
      - NODE_ENV=production
      - PORT=3000
      - NEXT_OUTPUT_MODE=standalone
      
      # AWS S3 (Cloud Storage)
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_FOLDER_PREFIX=${AWS_FOLDER_PREFIX}
      
      # Openpay
      - OPENPAY_ID=${OPENPAY_ID}
      - OPENPAY_PRIVATE_KEY=${OPENPAY_PRIVATE_KEY}
      - OPENPAY_PUBLIC_KEY=${OPENPAY_PUBLIC_KEY}
      - OPENPAY_SANDBOX=${OPENPAY_SANDBOX:-true}
      
      # Redis (Optional)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - escalafin-network
    volumes:
      - app-cache:/app/.next/cache
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-escalafin_db}
      - POSTGRES_USER=${POSTGRES_USER:-escalafin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backup-escalafin
      # - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql  # Opcional: script de inicializaciÃ³n
    restart: unless-stopped
    networks:
      - escalafin-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-escalafin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - escalafin-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  app-cache:
    driver: local

networks:
  escalafin-network:
    driver: bridge
